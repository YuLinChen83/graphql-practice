generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Role {
  id             Int              @default(autoincrement()) @id
  name           String           @unique   //SUPERADMIN, ADMIN(TEACHER), USER(STUDENT)
  permissionIds  String?          //權限：以,分割permissionId
}

model Permission {
  id             Int              @default(autoincrement()) @id
  name           String           @unique
  remark         String?
}

model User {
  id             Int              @default(autoincrement()) @id
  email          String           @unique
  lastName       String
  firstName       String
  nickName       String
  website        String?
  notified        Boolean          @default(false)
  activated      Boolean          @default(false)
  birthday       DateTime?
  photo          String?
  gender         Gender?
  password       String
  purchaseCourseIds String?         //購買課程：以,分割courseId
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  facebookId     String?
  googleId       String?
  roleId         Int
  role           Role             @relation(fields: [roleId], references: [id])
}

model LearningHistory {
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  courseId       Int
  course         Course           @relation(fields: [courseId], references: [id])
  time           Int    //已觀看時間
  note           String   //重點筆記

  @@id([userId, courseId])
}

model Course {
  id             Int              @default(autoincrement()) @id
  title          String
  content        String
  price          Int
  specialPrice   Int?
  vedioUrl       String?
  totalTime      Int?   //系統化課程總時間
  remark         String?
  publishTime    DateTime?
}

model SystematicCourse {
  courseId       Int
  course         Course           @relation(fields: [courseId], references: [id])
  chapterName    String
  unitName       String
  unitContent    String
  vedioUrl       String?
  remark         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt

  @@id([courseId, chapterName, unitName])
}

model OneToOneCourseReservation {
  id             Int              @default(autoincrement()) @id
  courseId       Int
  course         Course           @relation(fields: [courseId], references: [id])
  userId         Int
  user           User             @relation(fields: [userId], references: [id])
  startTime      DateTime?
  endTime        DateTime?
}

model CourseComment {
  id             Int              @default(autoincrement()) @id
  courseId       Int
  course         Course           @relation(fields: [courseId], references: [id])
  chapterName    String
  unitName       String
  userId         Int
  author         User             @relation(fields: [userId], references: [id])
  content        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
}

model CourseCommentReply {
  id             Int              @default(autoincrement()) @id
  commentId      CourseComment    @relation(fields: [id], references: [id])
  userId         Int
  author         User             @relation(fields: [userId], references: [id])
  content        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
}

enum Gender {
  MALE
  FEMALE
  TRANSGENDER
}
